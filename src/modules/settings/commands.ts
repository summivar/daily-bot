import { Composer } from 'grammy';
import type { BotContext } from '@/types/bot';
import { SettingsQueries } from './queries';
import { CommandParser } from '@/utils/parsing';
import { DateUtils } from '@/utils/date';
import logger from '@/utils/logger';

const composer = new Composer<BotContext>();

composer.command('settings', async (ctx) => {
  try {
    if (!ctx.user?.settings) {
      await ctx.reply('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    const settings = ctx.user.settings;
    const timeStr = `${settings.reminderHour.toString().padStart(2, '0')}:${settings.reminderMinute.toString().padStart(2, '0')}`;
    
    const message = [
      '‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
      '',
      `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${settings.remindersEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}`,
      `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${timeStr}`,
      `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${settings.timezone}`,
      '',
      '–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
      '‚Ä¢ /reminder_on - –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      '‚Ä¢ /reminder_off - –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      '‚Ä¢ /reminder_time HH:MM - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
      '‚Ä¢ /timezone <IANA> - –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
    ].join('\n');

    await ctx.reply(message);

  } catch (error) {
    logger.error('Error in settings command:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

composer.command('reminder_on', async (ctx) => {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    await SettingsQueries.updateReminderSettings(ctx.user.id, true);
    await ctx.reply('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');

  } catch (error) {
    logger.error('Error enabling reminders:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

composer.command('reminder_off', async (ctx) => {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    await SettingsQueries.updateReminderSettings(ctx.user.id, false);
    await ctx.reply('‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã');

  } catch (error) {
    logger.error('Error disabling reminders:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

composer.command('reminder_time', async (ctx) => {
  try {
    const input = ctx.match;
    
    if (!input || typeof input !== 'string') {
      await ctx.reply(
        '‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n' +
        '–§–æ—Ä–º–∞—Ç: /reminder_time HH:MM\n\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ /reminder_time 21:00\n' +
        '‚Ä¢ /reminder_time 09:30'
      );
      return;
    }

    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const parsed = CommandParser.parseReminderTime(input.trim());
    if (!parsed) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00)');
      return;
    }

    await SettingsQueries.updateReminderTime(ctx.user.id, parsed.hour, parsed.minute);
    
    const timeStr = `${parsed.hour.toString().padStart(2, '0')}:${parsed.minute.toString().padStart(2, '0')}`;
    await ctx.reply(`‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timeStr}`);

  } catch (error) {
    logger.error('Error setting reminder time:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

composer.command('timezone', async (ctx) => {
  try {
    const input = ctx.match;
    
    if (!input || typeof input !== 'string') {
      await ctx.reply(
        'üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n\n' +
        '–§–æ—Ä–º–∞—Ç: /timezone <IANA>\n\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ /timezone Europe/Warsaw\n' +
        '‚Ä¢ /timezone America/New_York\n' +
        '‚Ä¢ /timezone Asia/Tokyo\n' +
        '‚Ä¢ /timezone UTC'
      );
      return;
    }

    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const timezone = input.trim();
    
    if (!DateUtils.isValidTimezone(timezone)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IANA —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Warsaw)');
      return;
    }

    await SettingsQueries.updateTimezone(ctx.user.id, timezone);
    await ctx.reply(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timezone}`);

  } catch (error) {
    logger.error('Error setting timezone:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

export default composer;