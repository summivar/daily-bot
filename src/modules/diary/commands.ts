import { Composer, InputFile } from 'grammy';
import type { BotContext } from '@/types/bot';
import { DiaryService } from './service';
import { CommandParser } from '@/utils/parsing';
import logger from '@/utils/logger';

const composer = new Composer<BotContext>();

// Add entry command
composer.command('add', async (ctx) => {
  try {
    const input = ctx.match;
    
    if (!input || typeof input !== 'string') {
      await ctx.reply(
        'üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫\n\n' +
        '–§–æ—Ä–º–∞—Ç: /add [–æ—Ü–µ–Ω–∫–∞] —Ç–µ–∫—Å—Ç\n\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ /add –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –Ω–∞ —Ä–∞–±–æ—Ç–µ\n' +
        '‚Ä¢ /add 8 –û—Ç–ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∑—å—è–º–∏\n\n' +
        '–û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 10 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
      );
      return;
    }

    const result = await DiaryService.addEntry(ctx, input);
    const entry = result.entry;
    const isUpdate = result.isUpdate;
    
    const statusText = isUpdate ? '‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞';
    const formattedEntry = DiaryService.formatEntryMessage(entry);
    
    await ctx.reply(`${statusText}\n\n${formattedEntry}`);
    
  } catch (error) {
    logger.error('Error in add command:', error);
    
    if (error instanceof Error) {
      await ctx.reply(`‚ùå ${error.message}`);
    } else {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

// Today's entry command
composer.command('today', async (ctx) => {
  try {
    const entry = await DiaryService.getTodayEntry(ctx);
    
    if (!entry) {
      await ctx.reply(
        'üìù –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç.\n\n' +
        '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å: /add [–æ—Ü–µ–Ω–∫–∞] —Ç–µ–∫—Å—Ç'
      );
      return;
    }
    
    const formattedEntry = DiaryService.formatEntryMessage(entry);
    await ctx.reply(`üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n${formattedEntry}`);
    
  } catch (error) {
    logger.error('Error in today command:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// List entries command
composer.command('list', async (ctx) => {
  try {
    const monthInput = ctx.match && typeof ctx.match === 'string' ? ctx.match.trim() : undefined;
    await showEntriesList(ctx, monthInput, 1);
    
  } catch (error) {
    logger.error('Error in list command:', error);
    
    if (error instanceof Error) {
      await ctx.reply(`‚ùå ${error.message}`);
    } else {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

// Stats command
composer.command('stats', async (ctx) => {
  try {
    const yearInput = ctx.match && typeof ctx.match === 'string' ? ctx.match.trim() : undefined;
    
    const stats = await DiaryService.getStatsForYear(ctx, yearInput);
    const year = yearInput ? parseInt(yearInput) : new Date().getFullYear();
    
    const message = DiaryService.formatStatsMessage(stats, year);
    await ctx.reply(message);
    
  } catch (error) {
    logger.error('Error in stats command:', error);
    
    if (error instanceof Error) {
      await ctx.reply(`‚ùå ${error.message}`);
    } else {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

// Export command
composer.command('export', async (ctx) => {
  try {
    const args = ctx.match && typeof ctx.match === 'string' ? ctx.match.trim().split(' ') : [];
    
    if (args.length === 0) {
      await ctx.reply(
        'üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π\n\n' +
        '–§–æ—Ä–º–∞—Ç: /export <format> [–≥–æ–¥]\n\n' +
        '–§–æ—Ä–º–∞—Ç—ã: csv, json\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ /export csv\n' +
        '‚Ä¢ /export json 2023\n' +
        '‚Ä¢ /export csv 2024'
      );
      return;
    }
    
    const format = CommandParser.parseExportFormat(args[0]);
    if (!format) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: csv –∏–ª–∏ json');
      return;
    }
    
    const yearInput = args[1];
    
    await ctx.reply('‚è≥ –ì–æ—Ç–æ–≤–ª—é —ç–∫—Å–ø–æ—Ä—Ç...');
    
    const result = await DiaryService.exportEntries(ctx, format, yearInput);
    
    // Send as document
    await ctx.replyWithDocument(
      new InputFile(Buffer.from(result.content, 'utf-8'), result.filename),
      {
        caption: `üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}`,
      }
    );
    
  } catch (error) {
    logger.error('Error in export command:', error);
    
    if (error instanceof Error) {
      await ctx.reply(`‚ùå ${error.message}`);
    } else {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

// Helper function to show entries list with pagination
async function showEntriesList(ctx: BotContext, monthInput?: string, page: number = 1): Promise<void> {
  const entries = await DiaryService.getEntriesForMonth(ctx, monthInput, page);
  const message = DiaryService.formatEntriesList(entries);
  
  if (entries.totalPages > 1) {
    const keyboard = [];
    
    if (entries.hasPrevious) {
      keyboard.push({ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `entries_prev_${page - 1}` });
    }
    
    if (entries.hasNext) {
      keyboard.push({ text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data: `entries_next_${page + 1}` });
    }
    
    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [keyboard],
      },
    });
  } else {
    await ctx.reply(message);
  }
}

// Callback handlers for pagination
composer.callbackQuery(/^entries_(prev|next)_(\d+)$/, async (ctx) => {
  const match = ctx.match;
  if (!match) return;
  
  const page = parseInt(match[2] || '1');
  await ctx.answerCallbackQuery();
  
  try {
    await showEntriesList(ctx, undefined, page);
    await ctx.deleteMessage();
  } catch (error) {
    logger.error('Error in pagination callback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  }
});

export default composer;