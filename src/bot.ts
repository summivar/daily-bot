import { Bot, session } from 'grammy';
import type { BotContext, SessionData } from '@/types';
import config from '@/config';
import logger from '@/utils/logger';
import { loggingMiddleware } from '@/middlewares/logging';
import { errorMiddleware } from '@/middlewares/error';
import { SettingsQueries } from '@/modules/settings';
import { diaryCommands } from '@/modules/diary';
import { settingsCommands } from '@/modules/settings';

export function createBot(): Bot<BotContext> {
  const bot = new Bot<BotContext>(config.TELEGRAM_BOT_TOKEN);

  // Session middleware
  bot.use(session({
    initial: (): SessionData => ({}),
  }));

  // User middleware - load user from database
  bot.use(async (ctx, next) => {
    if (ctx.from) {
      try {
        const user = await SettingsQueries.createOrUpdateUser(
          BigInt(ctx.from.id),
          ctx.from.username,
          ctx.from.first_name,
          ctx.from.last_name
        );
        
        ctx.user = user;
        ctx.session.user = user;
        ctx.session.timezone = user.settings?.timezone || 'UTC';
        
      } catch (error) {
        logger.error('Error loading user:', error);
      }
    }
    
    await next();
  });

  // Error handling middleware
  bot.use(errorMiddleware());

  // Logging middleware
  bot.use(loggingMiddleware());

  // Commands
  bot.command('start', async (ctx) => {
    const username = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    const message = [
      `üëã –ü—Ä–∏–≤–µ—Ç, ${username}!`,
      '',
      'üìî –≠—Ç–æ –±–æ—Ç-–¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.',
      '',
      'üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
      '‚Ä¢ /add [–æ—Ü–µ–Ω–∫–∞] —Ç–µ–∫—Å—Ç - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å',
      '‚Ä¢ /today - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
      '‚Ä¢ /list [YYYY-MM] - —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü',
      '‚Ä¢ /stats [YYYY] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥',
      '‚Ä¢ /export csv|json [YYYY] - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π',
      '',
      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:',
      '‚Ä¢ /settings - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      '‚Ä¢ /reminder_on/off - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      '‚Ä¢ /reminder_time HH:MM - –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      '‚Ä¢ /timezone <IANA> - —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
      '',
      '‚ùì /help - —Å–ø—Ä–∞–≤–∫–∞',
    ].join('\n');

    await ctx.reply(message);
  });

  bot.command('help', async (ctx) => {
    const message = [
      'üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
      '',
      'üìù –ó–∞–ø–∏—Å–∏:',
      '‚Ä¢ /add —Ç–µ–∫—Å—Ç - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –±–µ–∑ –æ—Ü–µ–Ω–∫–∏',
      '‚Ä¢ /add 8 –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å - –∑–∞–ø–∏—Å—å —Å –æ—Ü–µ–Ω–∫–æ–π (1-10)',
      '‚Ä¢ /today - –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
      '',
      'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π:',
      '‚Ä¢ /list - –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
      '‚Ä¢ /list 2024-01 - –∑–∞–ø–∏—Å–∏ –∑–∞ —è–Ω–≤–∞—Ä—å 2024',
      '',
      'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:',
      '‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥',
      '‚Ä¢ /stats 2023 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 2023 –≥–æ–¥',
      '',
      'üì§ –≠–∫—Å–ø–æ—Ä—Ç:',
      '‚Ä¢ /export csv - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥',
      '‚Ä¢ /export json 2023 - —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON –∑–∞ 2023',
      '',
      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:',
      '‚Ä¢ /settings - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      '‚Ä¢ /reminder_on - –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      '‚Ä¢ /reminder_off - –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      '‚Ä¢ /reminder_time 21:00 - –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      '‚Ä¢ /timezone Europe/Warsaw - —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
      '',
      'üí° –û—Ü–µ–Ω–∫–∏: 1-3 –ø–ª–æ—Ö–∏–µ –¥–Ω–∏, 4-6 —Å—Ä–µ–¥–Ω–∏–µ, 7-10 —Ö–æ—Ä–æ—à–∏–µ',
    ].join('\n');

    await ctx.reply(message);
  });

  // Module commands
  bot.use(diaryCommands);
  bot.use(settingsCommands);

  // Unknown command handler
  bot.on('message:text', async (ctx) => {
    const text = ctx.message.text;
    
    if (text.startsWith('/')) {
      await ctx.reply(
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
    }
  });

  return bot;
}

export default createBot;